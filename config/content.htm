<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:</p>
<p>個人網站:</p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w10</h3>
<p>題目一<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5IVG7hEn1bY" width="560"></iframe></p>
<h3>w11_hw</h3>
<p>第一題</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def print_circle():
    radius = 4
    center_x = 5
    center_y = 5
    for y in range(10):
        for x in range(10):
            # 計算每個點與圓心的距離
            distance = (x - center_x)**2 + (y - center_y)**2
            # 若距離在圓的半徑範圍內，印出 "*"，否則印出空白
            if distance &lt;= radius**2:
                print("*", end="")
            else:
                print(" ", end="")
        print()  # 換行

# 執行程式
print_circle()
</pre>
<p><br/><br/></p>
<p>第二題</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400, height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
# 每一格的 pixel 數
gs = 20
 
# gs*tc = canvas width and height
 
ctx = canvas.getContext("2d")
 
def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()
     
def grid(width, height, grid_pix):
    # x 方向共 width 格
    # y 方向共 height 格
    # grid_pix, 每一個的 pixel 點數
    # 利用迴圈與座標增量繪圖
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")
 
def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect(x - 1, y - 1, gs, gs)
 
# 繪製圓形的邏輯
def draw_circle(center_x, center_y, radius):
    for i in range(10):  # 設定 10x10 網格
        for j in range(10):
            # 計算每個格子中心的 (x, y) 座標
            x_center = (i * gs) + gs / 2
            y_center = (j * gs) + gs / 2
            # 計算每個格子與圓心的距離
            distance = math.sqrt((x_center - center_x) ** 2 + (y_center - center_y) ** 2)
            # 如果距離小於等於半徑，填充這個格子
            if distance &lt;= radius:
                fill(i * gs, j * gs, "black")
 
# 繪製 10x10 網格
grid(10, 10, gs)
 
# 圓心設在 (5, 5)，半徑設為 5
center_x = 5 * gs  # 圓心的 x 座標
center_y = 5 * gs  # 圓心的 y 座標
radius = 5 * gs  # 半徑
 
# 繪製圓形
draw_circle(center_x, center_y, radius)
 </pre>
<p><br/><br/></p>
<p>第三題</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/drEmapVMXpA?si=pfyQkJ28ZAhEPTrw" title="YouTube video player" width="560"></iframe></p>
<h3>w12_hw</h3>
<p><span>第六題:06_list_slicing</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/b801d502a8116ba25d214ef10034bcc4/raw/6c9588b9961a72d347a0092d9c68a536499547e1/w12%252006_list_slicing">城市</a></span></p>
<p><span></span></p>
<p>根據索引選取單個或多個元素。</p>
<p>設定步長來篩選間隔元素。</p>
<p>使用負數索引來倒序選取元素。</p>
<p>反轉整個列表。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]
print(cities) # 輸出所有城市
print(cities[1]) # 輸出索引 1 的城市
print(cities[1:4]) # 從索引 1 到 3（不包含索引 4）
print(cities[1:4:2]) # 從索引 1 到 3，每隔一個元素取一次
print(cities[0:3]) # 從索引 0 到 2（不包含索引 3）
print(cities[:3]) # 與上面相同，從開始到索引 2（不包含索引 3）
print(cities[2:5]) # 從索引 2 到 4（不包含索引 5）
print(cities[2:]) # 從索引 2 開始到列表結尾
print(cities[0:5:2]) # 從索引 0 到 4，每隔一個元素取一次
print(cities[::2]) # 從開始到結尾，每隔一個元素取一次
print(cities[4]) # 輸出索引 4 的城市
print(cities[-1]) # 輸出最後一個元素（倒數第 1 個）
print(cities[-4:-1]) # 切片：從倒數第 4 個到倒數第 2 個（不包含倒數第 1 個）
print(cities[3:0:-1]) # 從索引 3 到 1（不包含索引 0）
print(cities[-2:-5:-1]) # 從倒數第 2 個到倒數第 5 個
print(cities[::-1]) # 將整個列表反轉</pre>
<p><span></span></p>
<p><span>第七題:07_list_slicing_use</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/0942ce6652e125fcbd4ff63e75ce3ee1/raw/fba5759b043cc79774f9e8449da288683250cde8/w12%252007_list_slicing_use">列表操作</a></span></p>
<p>列表操作（例如合併和插入元素）允許靈活地修改列表內容。</p>
<p>修改列表中的切片會影響原列表的結構。</p>
<p>使用<span> </span><code>del</code><span> </span>可以刪除列表中的特定元素或整個列表。</p>
<p></p>
<h4></h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義感官列表
senses = ["eyes", "nose", "ears", "tongue", "skin"]
print (senses) # 輸出：['eyes', 'nose', 'ears', 'tongue', 'skin']
 
# 修改(索引 1)的元素替換為 "smell"
senses[1] = "smell"
print (senses) # 輸出：['eyes', 'smell', 'ears', 'tongue', 'skin']
 
# 修改索引第三和 第四的元素替換為 ["taste", "touch"]，
senses[3:5] = ["taste", "touch"]
print (senses) # 輸出：['eyes', 'smell', 'ears', 'taste', 'touch']
 
# 修改索引第零到第二的元素替換為 ["sight", "hearing"]
senses[0:3:2] = ["sight", "hearing"]
print (senses) # 輸出：['sight', 'smell', 'hearing', 'taste', 'touch']
 
# 定義行星列表
planets = ["Mercury", "Mars", "Earth", "Neptune"]
print (planets) # 輸出：['Mercury', 'Mars', 'Earth', 'Neptune']
 
# 向 planets "Jupiter"加入列表中，
planets = planets + ["Jupiter"]
print (planets) # 輸出：['Mercury', 'Mars', 'Earth', 'Neptune', 'Jupiter']
 
# 將 "Venus" 插入到 planets 列表的索引 2 位置
planets = planets[0:2] + ["Venus"] + planets[2:5]
print (planets) # 輸出：['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Jupiter']
 
# 在索引 5 位置插入 "Uranus" 和 "Saturn"
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]
print(planets) # 輸出：['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Uranus', 'Saturn', 'Jupiter']
 
# 定義房間列表
house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
print (house) # 輸出：['kitchen', 'dining room', 'living room', 'bedroom', 'bathoom', 'garden', 'balcony', 'terrace']
 
# 刪除索引 1 的元素（'dining room'）
del house[1]
print (house) # 輸出：['kitchen', 'living room', 'bedroom', 'bathoom', 'garden', 'balcony', 'terrace']
 
# 刪除索引 4 到 5 的元素（'garden' 和 'balcony'）
del house[4:6]
print (house) # 輸出：['kitchen', 'living room', 'bedroom', 'bathoom', 'terrace']
 
# 刪除步長為 2 的元素（'kitchen'，'bedroom'，'terrace'）
del house[::2]
print (house) # 輸出：['living room', 'bathoom']
 
# 刪除整個 house 列表
del house
 
# 嘗試輸出會引發錯誤，因為 house 列表已被刪除
print (house) # NameError: name 'house' is not</pre>
<p></p>
<p><span>第八題:08_for_range</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/b215a228263334e0904c318e6ba7f919/raw/6ec4276ec1b216749a433ed83a145f937b36a896/w12%252008_for_range">配對朋友和食物</a></span></p>
<p>動態處理更大範圍的清單。</p>
<p>增加錯誤處理（如清單長度不一致）。</p>
<p>整合更靈活的字串處理方式（如使用<span> </span><code>zip</code><span> </span>或<span> </span><code>f-string</code>）。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義朋友的名字
friends = ["Geetha", "Luca", "Daisy", "Juhan"]
 
# 定義不同食物
dishes = ["sushi", "burgers", "tacos", "pizza"]
 
print ("My friends' names are:") # 輸出：(My friends' names are:)
 
print (friends) # 列印friends清單：['Geetha', 'Luca', 'Daisy', 'Juhan']
 
# 使用for迴圈，變數 index 從 0 到 3（包含 0，不包含 4）
for index in range (0,4):
print ("index: " + str(index))
print ("friend: " + friends[index])
 
# 列印食物清單
print ("Their favorite dishes are:") # 輸出：Their favorite dishes are:
 
print (dishes) # 列印dishes清單：['sushi', 'burgers', 'tacos', 'pizza']
 
# 用迴圈逐一打印每種食物及其索引
for index in range (0,4):
print ("index: " + str(index))
print ("dish: " + dishes[index])
 
# 配對朋友和食物並打印
for index in range (0,4):
print ("My friend " + friends[index] + "'s favorite dish is " + dishes[index])</pre>
<p></p>
<p><span>第九題:09_for_loop_if_equals</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/42aede87f76e9a781c6649dc98cd7a94/raw/f1e678a69d376a46534cc2759b7cc48ce06c0a6a/w12%252009_for_loop_if_equals">動物</a></span></p>
<p>動物清單： 程式列出所有動物及其位置。</p>
<p>特定條件判斷： 當觀察到目標動物時，輸出特別的訊息，強調目標。</p>
<p>靈活性： 清單和<span> </span><code>wanted_to_see</code><span> </span>都可以改變，程式可適應新的資料。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義動物清單
animals = ["giraffe", "penguin", "dolphin"]
 
print (animals) # 輸出：['giraffe', 'penguin', 'dolphin']
 
# 使用for迴圈，變數 i 從 0 遍歷到清單的長度減 1
# for each position in the list
for i in range (0, len(animals)):
print ("-- Beginning of loop --")
# print each element and its position
print ("The element in position " + str(i) + " is " + animals[i])
 
# 定義目標動物
wanted_to_see = "penguin"
 
# 使用for迴圈遍歷清單
# for each position in the list
for i in range (0, len(animals)):
# if the current animal is what you really wanted to see
if animals[i] == wanted_to_see:
# print out that that's the animal you really wanted to see
print ("I saw a " + animals[i] + " and I really wanted to see it!") # 輸出：I saw a &lt;動物&gt; and I really wanted to see it!
# if the current animal is not what you really wanted to see
else:
# just print out that you saw it
print ("I saw a " + animals[i]) # 輸出：I saw a &lt;動物&gt;</pre>
<p></p>
<p><span>第十題:10_for_search</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/8f09d16d0d158e344af8214c32e94b15/raw/d61a026a183d6ab9add9a8634e1c961cd64c97b9/w12%252010_for_search">配件的名稱長度</a></span></p>
<p>清單遍歷與條件篩選： 通過<span> </span><code>for</code><span> </span>迴圈遍歷配件清單，並使用條件語句來過濾出長度為特定數字的配件，或者根據位置篩選出符合條件的配件。</p>
<p>動態條件設定： 使用變數設定閾值（如長度或位置），使得程式在不同情況下可靈活運作。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 輸出每個配件的名稱及其位置
accessories = ["belt", "hat", "gloves", "sunglasses", "ring"] # 列印每個配件的名稱以及它在清單中的位置
print (accessories)
# for each position in the list
for i in range (len(accessories)):
#print each elements and its position
print ("The element " + accessories[i] + " is in position " + str(i))
 
# 輸出長度為 6 的配件
# for each position in the list
for i in range (len(accessories)):
# if the length of the element equals 6
if len(accessories[i]) == 6:
# print the element, its position, and its number of characters
print ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")
 
# 輸出長度小於 6 的配件
# for each position in the list
for i in range (len(accessories)):
# if the length of the element is less than 6
if len(accessories[i]) &lt; 6:
# print the element, its position, and its number of characters
print ("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")
# defining the threshold
 
# 輸出長度大於設定閾值 6 的配件
n_of_characters = 6
# for each position in the list
for i in range (len(accessories)):
# if the length of the element is greater than the threshold
if len(accessories[i]) &gt; n_of_characters:
# print the element, its position, and its number of characters
print ("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")
# defining the threshold
 
# 輸出長度不等於設定閾值的配件
n_of_characters = 6
# for each position in the list
for i in range (len(accessories)):
# if the length of the element is not equal to the threshold
if len(accessories[i]) != n_of_characters:
# print the element, its position, and its number of characters
print ("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))
# defining the threshold
 
# 輸出位置小於或等於指定位置 2 的配件
position = 2
# for each position in the list
for i in range (len(accessories)):
# if the position of the element is less then or equal to to the threshold
if i &lt;= position:
# print the element, its position, and its position characteristic
print ("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))
# defining the threshold
 
# 輸出位置大於或等於指定位置 2 的配件
position = 2
# for each position in the list
for i in range (len(accessories)):
# if the position of the element is greater then or equal to to the threshold
if i &gt;= position:
# print the element, its position, and its position characteristic
print ("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))
</pre>
<p></p>
<h3>w13_hw</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 建立 canvas 元素
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 定義圓心和半徑
x1, y1 = 200, 200  # 第一個圓的圓心
x2, y2 = 300, 300  # 第二個圓的圓心
radius = 141.4  # 圓的半徑

ctx = canvas.getContext("2d")

# === 繪製第一個圓 ===
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "black"
ctx.fill()

# === 繪製重疊區域 (黑色交集區塊) ===
ctx.save()  # 保存繪圖狀態
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # 限制繪圖範圍為第一個圓

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "black"
ctx.fill()
ctx.restore()  # 恢復繪圖狀態

# === 填充第一個圓其他區域 ===
# 填充左半部分 (紅色)
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.arc(x1, y1, radius, 3.14159, 3.14159 * 1.5, False)
ctx.closePath()
ctx.fillStyle = "red"
ctx.fill()

# 填充上半部分 (藍色)
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.arc(x1, y1, radius, 3.14159 * 1.5, 0, False)
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()

# 填充左下部分 (紫色)
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.arc(x1, y1, radius, 3.14159 * 0.5, 3.14159, False)
ctx.closePath()
ctx.fillStyle = "purple"
ctx.fill()

# === 填充第二個圓區域 ===

# 填充右上部分 (粉色)
ctx.beginPath()
ctx.moveTo(x2, y2)
ctx.arc(x2, y2, radius, 3.14159 * 1.5, 0, False)
ctx.closePath()
ctx.fillStyle = "pink"
ctx.fill()

# 填充右下部分 (灰色)
ctx.beginPath()
ctx.moveTo(x2, y2)
ctx.arc(x2, y2, radius, 0, 3.14159 * 0.5, False)
ctx.closePath()
ctx.fillStyle = "gray"
ctx.fill()

# 填充下半部分 (綠色)
ctx.beginPath()
ctx.moveTo(x2, y2)
ctx.arc(x2, y2, radius, 3.14159 * 0.5, 3.14159, False)
ctx.closePath()
ctx.fillStyle = "green"
ctx.fill()

# === 繪製輔助框架與對角線 ===
# 繪製兩個圓的邊框
ctx.lineWidth = 2
ctx.strokeStyle = "black"
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.stroke()

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.stroke()

# 繪製正方形框架
ctx.lineWidth = 2
ctx.strokeStyle = "red"

# 第一個正方形
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.stroke()
ctx.fillStyle = "green"  # 填充顏色
ctx.fill()
# 第二個正方形
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.stroke()
ctx.fillStyle = "blue"  # 填充顏色
ctx.fill()
# 繪製對角線
ctx.lineWidth = 2
ctx.strokeStyle = "blue"
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()</pre>
<p><!-- 導入 brython 程式庫 --></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p><!-- 啟動 Brython --></p>
<script>
window.onload = function() {
        brython({debug: 1, pythonpath: ['/static/', './../downloads/py/']});
    }
</script>
<!-- 畫布定位點 -->
<p></p>
<p></p>
<h3>w14_ex</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
  
# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建 canvas 並設置寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
      
    # 獲取 canvas 的 2D 上下文
    ctx = canvas.getContext("2d")
      
    return canvas, ctx
  
# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"
  
# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2
  
# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    # 初始化畫布
    canvas, ctx = initialize_canvas(400, 400)
      
    # 清除畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
      
    # 顏色區域存儲
    color_dict = {}
  
    # 使用掃描線方法填充區域
    for py in range(0, canvas.height):
        # 逐行掃描，判斷每個點是否在圓內
        current_color = None  # 當前掃描線區域的顏色
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
              
            if in_circle1 and in_circle2 and in_circle3:
                # 三個圓的交集區域
                if "intersection" not in color_dict:
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 只有圓1和圓2的交集
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle2 and in_circle3:
                # 只有圓2和圓3的交集
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1 and in_circle3:
                # 只有圓1和圓3的交集
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle1:
                # 只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 點不在三個圓內，畫外區域
                current_color = "white"  # 背景色白色
  
            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素
  
# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100
  
# 呼叫畫圓函式
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</pre>
<h3>w15_hw</h3>
<p><span>第一題 </span><a href="https://mdecp2024.github.io/hw-41323132/content/Brython.html?src=https://gist.githubusercontent.com/41323132/7636ed19169768af1968e459e92f8cbc/raw/ed86d59d3e73a6185513cc24c906d23075360866/EX-1.py">以"從 1 累加到 100"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化總和變量
total_sum = 0
 
# 從 1 累加到 100
for i in range(1, 101):
    total_sum += i
 
# 顯示結果
print("從 1 累加到 100 的總和是:", total_sum)</pre>
<p><span></span></p>
<p><span>第二題 </span><a href="https://mdecp2024.github.io/hw-41323132/content/Brython.html?src=https://gist.githubusercontent.com/41323132/59fbb12bf28e8cd3ff79254fd0a6e320/raw/df5d8f708ff77a24d7b325a21404188aadf79733/EX-2.py">"addto"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義函式 addto
def addto(start, end):
    total_sum = 0
    for i in range(start, end + 1):
        total_sum += i
    return total_sum
 
# 呼叫函式 addto，並輸出結果
result = addto(1, 100)
print("從 1 累加到 100 的總和是:", result)</pre>
<p><span></span></p>
<p><span>第三題 </span><a href="https://mdecp2024.github.io/hw-41323132/content/Brython.html?src=https://gist.githubusercontent.com/41323132/fee1263a43e6587dccd5c40085b6af69/raw/947ba735f82b3f8de0a2ccbcce4e8309d8bcd9fc/EX-3.py">add_only_even</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義函式 add_only_even，接受兩個參數 start 和 end
def add_only_even(start, end):
    total_sum = 0
    # 使用 for 迴圈遍歷從 start 到 end 的所有數字
    for i in range(start, end + 1):
        if i % 2 == 0:  # 判斷是否為偶數
            total_sum += i  # 累加偶數
    return total_sum
 
# 讓用戶輸入起始值和結束值
start = int(input("請輸入起始整數: "))
end = int(input("請輸入結束整數: "))
 
# 呼叫函式並輸出結果
result = add_only_even(start, end)
print(f"從 {start} 到 {end} 的偶數總和是: {result}")</pre>
<p></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>